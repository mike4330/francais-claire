#!/bin/bash

# Get next available ID for CEFR level groups
# Usage: ./getid [a|b|c] or ./getid -a or ./getid -r
# -a flag outputs all levels in format A=123 B=456 C=789
# -r flag shows range usage statistics for all levels
# Reads level ranges from config.json

if [ $# -eq 0 ]; then
    echo "Usage: $0 [a|b|c] or $0 -a or $0 -r"
    echo "Level ranges are defined in config.json"
    echo "-a flag outputs all levels in format A=123 B=456 C=789"
    echo "-r flag shows range usage statistics for all levels"
    exit 1
fi

# Check if jq is available
if ! command -v jq &> /dev/null; then
    echo "❌ Error: jq is required but not installed. Please install jq first."
    echo "   sudo apt-get install jq  # Ubuntu/Debian"
    echo "   brew install jq          # macOS"
    exit 1
fi

# Load baseDir from config.json
CONFIG_FILE="config.json"
if [ ! -f "$CONFIG_FILE" ]; then
    CONFIG_FILE="../config.json"
    if [ ! -f "$CONFIG_FILE" ]; then
        CONFIG_FILE="/var/www/html/language/config.json"
    fi
fi

# Check if config.json exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "❌ Error: Config file not found. Expected at config.json, ../config.json, or /var/www/html/language/config.json"
    exit 1
fi

BASE_DIR=$(jq -r '.baseDir' "$CONFIG_FILE" 2>/dev/null)
if [ "$BASE_DIR" = "null" ] || [ -z "$BASE_DIR" ]; then
    echo "❌ Error: baseDir not found in config.json"
    exit 1
fi

SOURCE_DIR="$BASE_DIR/questions/source/"

# Check if source directory exists
if [ ! -d "$SOURCE_DIR" ]; then
    echo "❌ Error: Source directory $SOURCE_DIR not found."
    exit 1
fi

# Fast function to get highest ID in range using jq
get_highest_id_in_range() {
    local min_id="$1"
    local max_id="$2"
    
    # Use jq to efficiently find highest ID in range across all JSON files
    cd "$SOURCE_DIR" 2>/dev/null || return 1
    local highest=$(jq -n --argjson min "$min_id" --argjson max "$max_id" '
        reduce inputs as $o (null; 
            if ($o.id >= $min and $o.id <= $max) and (. == null or $o.id > .) 
            then $o.id 
            else . 
            end
        )' q*.json 2>/dev/null)
    
    cd - >/dev/null 2>&1
    
    if [ "$highest" = "null" ] || [ -z "$highest" ]; then
        echo $((min_id - 1))
    else
        echo "$highest"
    fi
}

# Handle -a flag for all levels output
if [ "$1" = "-a" ]; then
    # Function to get next ID for a level using fast jq approach
    get_next_id_for_level() {
        local level_key="$1"
        local min_id=$(jq -r ".levelRanges.${level_key}.minId" "$CONFIG_FILE" 2>/dev/null)
        local max_id=$(jq -r ".levelRanges.${level_key}.maxId" "$CONFIG_FILE" 2>/dev/null)
        
        if [ "$min_id" = "null" ] || [ "$max_id" = "null" ]; then
            echo "null"
            return
        fi

        local highest_id=$(get_highest_id_in_range "$min_id" "$max_id")
        local next_id=$((highest_id + 1))
        echo "$next_id"
    }

    # Get next IDs for all levels
    a_id=$(get_next_id_for_level "a")
    b_id=$(get_next_id_for_level "b") 
    c_id=$(get_next_id_for_level "c")

    # Output in requested format
    echo "A=$a_id B=$b_id C=$c_id"
    exit 0
fi

# Handle -r flag for range usage statistics
if [ "$1" = "-r" ]; then
    # Function to get range usage statistics using fast jq approach
    get_range_usage() {
        local level_key="$1"
        local min_id=$(jq -r ".levelRanges.${level_key}.minId" "$CONFIG_FILE" 2>/dev/null)
        local max_id=$(jq -r ".levelRanges.${level_key}.maxId" "$CONFIG_FILE" 2>/dev/null)
        local levels=$(jq -r ".levelRanges.${level_key}.levels | join(\", \")" "$CONFIG_FILE" 2>/dev/null)
        
        if [ "$min_id" = "null" ] || [ "$max_id" = "null" ]; then
            echo "null"
            return
        fi

        # Use jq to efficiently count IDs in range
        cd "$SOURCE_DIR" 2>/dev/null || return 1
        local used_count=$(jq -n --argjson min "$min_id" --argjson max "$max_id" '
            reduce inputs as $o (0; 
                if ($o.id >= $min and $o.id <= $max) 
                then . + 1 
                else . 
                end
            )' q*.json 2>/dev/null)
        cd - >/dev/null 2>&1

        local total_range=$((max_id - min_id + 1))
        local usage_percent=$((used_count * 100 / total_range))
        local highest_id=$(get_highest_id_in_range "$min_id" "$max_id")
        local next_id=$((highest_id + 1))
        
        echo "📋 Level: $level_key ($levels)"
        echo "📏 Range: $min_id-$max_id (${total_range} total slots)"
        echo "📊 Used: $used_count/$total_range (${usage_percent}%)"
        echo "🎯 Next ID: $next_id"
        echo ""
    }

    echo "🔍 Question Range Usage Statistics"
    echo "=================================="
    echo ""
    
    # Get usage for all levels
    get_range_usage "a"
    get_range_usage "b"
    get_range_usage "c"
    
    exit 0
fi

level="$1"

# Read level configuration from config.json
level_lower=$(echo "$level" | tr '[:upper:]' '[:lower:]')
min_id=$(jq -r ".levelRanges.${level_lower}.minId" "$CONFIG_FILE" 2>/dev/null)
max_id=$(jq -r ".levelRanges.${level_lower}.maxId" "$CONFIG_FILE" 2>/dev/null)
description=$(jq -r ".levelRanges.${level_lower}.description" "$CONFIG_FILE" 2>/dev/null)
levels=$(jq -r ".levelRanges.${level_lower}.levels | join(\", \")" "$CONFIG_FILE" 2>/dev/null)

if [ "$min_id" = "null" ] || [ "$max_id" = "null" ]; then
    echo "❌ Error: Invalid level '$level' or missing configuration in $CONFIG_FILE"
    echo "Available levels: $(jq -r '.levelRanges | keys | join(", ")' "$CONFIG_FILE")"
    exit 1
fi

echo "📋 Level: $level ($levels - $description)"
echo "📏 ID Range: $min_id-$max_id"

# Get highest ID in range using fast jq approach
highest_id=$(get_highest_id_in_range "$min_id" "$max_id")
next_id=$((highest_id + 1))

# Validate that the next ID is within the allowed range
if [ "$next_id" -gt "$max_id" ]; then
    echo "❌ Error: Next ID ($next_id) would exceed maximum allowed ID ($max_id) for level $level."
    echo "   Current highest ID: $highest_id"
    echo "   Consider expanding range in $CONFIG_FILE"
    exit 1
fi

echo "🎯 Next available ID: $next_id" 
